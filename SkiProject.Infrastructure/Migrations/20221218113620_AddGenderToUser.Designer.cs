// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkiProject.Infrastructure.Data;

#nullable disable

namespace SkiProject.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221218113620_AddGenderToUser")]
    partial class AddGenderToUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Account.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProfileCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebCamera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bansko",
                            WebCamera = "https://www.banskoski.com/bg/webcams"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Borovets",
                            WebCamera = "https://weather-webcam.eu/borovec-hotel-ela-online-kamea-rila-na-jivo/"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pamporovo",
                            WebCamera = "http://free-webcambg.com/Pamporovo-07-webcam-live-online-camera-ski-tv-Snejanka-kameri-na-jivo-vremeto-weather.htm"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Panichishte",
                            WebCamera = "http://free-webcambg.com/Rilski-ezera-02-webcam-live-online-camera-hija-Pionerska-Panichishte-Rila-kameri-na-jivo-vremeto-weather.htm"
                        });
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.ForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CommentsCount")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentsCount = 3,
                            CreatedByUserId = "d33b5866-1720-4e84-bfba-977e3a864f86",
                            CreatedOn = new DateTime(2022, 12, 18, 13, 36, 20, 126, DateTimeKind.Local).AddTicks(5224),
                            LastUpdated = new DateTime(2022, 12, 18, 13, 36, 20, 126, DateTimeKind.Local).AddTicks(5256),
                            Title = "First topic"
                        },
                        new
                        {
                            Id = 2,
                            CommentsCount = 1,
                            CreatedByUserId = "d33b5866-1720-4e84-bfba-977e3a864f86",
                            CreatedOn = new DateTime(2022, 12, 18, 13, 36, 20, 126, DateTimeKind.Local).AddTicks(5260),
                            LastUpdated = new DateTime(2022, 12, 18, 13, 36, 20, 126, DateTimeKind.Local).AddTicks(5262),
                            Title = "Second topic"
                        });
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(3500)
                        .HasColumnType("nvarchar(3500)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.PlaceToStay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerNightForAPerson")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("PlaceToStays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 300,
                            CityId = 1,
                            Name = "Hotel Mura",
                            PricePerNightForAPerson = 150.00m
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 300,
                            CityId = 1,
                            Name = "Hotel Saint George",
                            PricePerNightForAPerson = 110.00m
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 300,
                            CityId = 1,
                            Name = "Evergreen",
                            PricePerNightForAPerson = 140.00m
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 300,
                            CityId = 2,
                            Name = "Hotel Lion",
                            PricePerNightForAPerson = 150.00m
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 230,
                            CityId = 2,
                            Name = "Hotel Iglika",
                            PricePerNightForAPerson = 120.00m
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 120,
                            CityId = 2,
                            Name = "Hotel Breza",
                            PricePerNightForAPerson = 80.00m
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 70,
                            CityId = 3,
                            Name = "Complex Malina",
                            PricePerNightForAPerson = 120.00m
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 230,
                            CityId = 3,
                            Name = "Hotel Snezhanka",
                            PricePerNightForAPerson = 160.00m
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 250,
                            CityId = 3,
                            Name = "Hotel Perelik",
                            PricePerNightForAPerson = 140.00m
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 40,
                            CityId = 4,
                            Name = "Hotel Magnoliya",
                            PricePerNightForAPerson = 30.00m
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 170,
                            CityId = 4,
                            Name = "103 Alpine Hotel",
                            PricePerNightForAPerson = 100.00m
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 90,
                            CityId = 4,
                            Name = "Hotel Panorama",
                            PricePerNightForAPerson = 60.00m
                        });
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(3500)
                        .HasColumnType("nvarchar(3500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "1 topic,1 comment",
                            Date = new DateTime(2022, 12, 18, 13, 36, 20, 126, DateTimeKind.Local).AddTicks(5324),
                            TopicId = 1,
                            UserId = "d33b5866-1720-4e84-bfba-977e3a864f86"
                        },
                        new
                        {
                            Id = 2,
                            Content = "1 topic,2 comment",
                            Date = new DateTime(2022, 12, 18, 13, 36, 20, 126, DateTimeKind.Local).AddTicks(5328),
                            TopicId = 1,
                            UserId = "d33b5866-1720-4e84-bfba-977e3a864f86"
                        },
                        new
                        {
                            Id = 3,
                            Content = "2 topic,1 comment",
                            Date = new DateTime(2022, 12, 18, 13, 36, 20, 126, DateTimeKind.Local).AddTicks(5330),
                            TopicId = 2,
                            UserId = "d33b5866-1720-4e84-bfba-977e3a864f86"
                        });
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LeftToPay")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("PlaceToStayId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrepaidOfTheReservation")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceOfTheReservation")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceToStayId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Shop.Advertisment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Advertisments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 12, 18, 13, 36, 20, 126, DateTimeKind.Local).AddTicks(5568),
                            LastUpdatedOn = new DateTime(2022, 12, 18, 13, 36, 20, 126, DateTimeKind.Local).AddTicks(5570),
                            ProductId = 1,
                            Title = "Woman jacket",
                            UserId = "d33b5866-1720-4e84-bfba-977e3a864f86"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 12, 18, 13, 36, 20, 126, DateTimeKind.Local).AddTicks(5573),
                            LastUpdatedOn = new DateTime(2022, 12, 18, 13, 36, 20, 126, DateTimeKind.Local).AddTicks(5575),
                            ProductId = 2,
                            Title = "Men pants",
                            UserId = "d33b5866-1720-4e84-bfba-977e3a864f86"
                        });
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Shop.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameOfCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameOfCategory = "Jackets"
                        },
                        new
                        {
                            Id = 2,
                            NameOfCategory = "Pants"
                        },
                        new
                        {
                            Id = 3,
                            NameOfCategory = "Shoes"
                        },
                        new
                        {
                            Id = 4,
                            NameOfCategory = "Glasses"
                        },
                        new
                        {
                            Id = 5,
                            NameOfCategory = "Helmets"
                        },
                        new
                        {
                            Id = 6,
                            NameOfCategory = "Underwear"
                        },
                        new
                        {
                            Id = 7,
                            NameOfCategory = "Skis"
                        },
                        new
                        {
                            Id = 8,
                            NameOfCategory = "Snowboards"
                        },
                        new
                        {
                            Id = 9,
                            NameOfCategory = "Others"
                        });
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Shop.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameOfGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameOfGender = "Kids"
                        },
                        new
                        {
                            Id = 2,
                            NameOfGender = "Women"
                        },
                        new
                        {
                            Id = 3,
                            NameOfGender = "Men"
                        },
                        new
                        {
                            Id = 4,
                            NameOfGender = "Unisex"
                        });
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Shop.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(3500)
                        .HasColumnType("nvarchar(3500)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("GenderId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedByUserId = "d33b5866-1720-4e84-bfba-977e3a864f86",
                            Description = "Woman jacket",
                            GenderId = 2,
                            Price = 120.0m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedByUserId = "d33b5866-1720-4e84-bfba-977e3a864f86",
                            Description = "Men pants",
                            GenderId = 3,
                            Price = 80.0m
                        });
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Shop.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Slope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceForSeasonAdult")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceForSeasonChildren")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerDayAdult")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerDayChildren")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("Slopes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            PriceForSeasonAdult = 1500.00m,
                            PriceForSeasonChildren = 350.00m,
                            PricePerDayAdult = 80.00m,
                            PricePerDayChildren = 25.00m
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            PriceForSeasonAdult = 1200.00m,
                            PriceForSeasonChildren = 310.00m,
                            PricePerDayAdult = 76.00m,
                            PricePerDayChildren = 20.00m
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            PriceForSeasonAdult = 1410.00m,
                            PriceForSeasonChildren = 340.00m,
                            PricePerDayAdult = 80.00m,
                            PricePerDayChildren = 20.00m
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            PriceForSeasonAdult = 500.00m,
                            PriceForSeasonChildren = 120.00m,
                            PricePerDayAdult = 32.00m,
                            PricePerDayChildren = 15.00m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkiProject.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkiProject.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkiProject.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkiProject.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.ForumTopic", b =>
                {
                    b.HasOne("SkiProject.Infrastructure.Data.Models.Account.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedTopics")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Message", b =>
                {
                    b.HasOne("SkiProject.Infrastructure.Data.Models.Account.ApplicationUser", "Receiver")
                        .WithMany("Messages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.PlaceToStay", b =>
                {
                    b.HasOne("SkiProject.Infrastructure.Data.Models.City", "City")
                        .WithMany("PlacesToStay")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Post", b =>
                {
                    b.HasOne("SkiProject.Infrastructure.Data.Models.ForumTopic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkiProject.Infrastructure.Data.Models.Account.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Reservation", b =>
                {
                    b.HasOne("SkiProject.Infrastructure.Data.Models.PlaceToStay", "PlaceToStay")
                        .WithMany("Reservations")
                        .HasForeignKey("PlaceToStayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkiProject.Infrastructure.Data.Models.Account.ApplicationUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlaceToStay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Shop.Advertisment", b =>
                {
                    b.HasOne("SkiProject.Infrastructure.Data.Models.Shop.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkiProject.Infrastructure.Data.Models.Account.ApplicationUser", "User")
                        .WithMany("CreatedAdvertisments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Shop.Product", b =>
                {
                    b.HasOne("SkiProject.Infrastructure.Data.Models.Shop.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkiProject.Infrastructure.Data.Models.Account.ApplicationUser", "User")
                        .WithMany("CreatedProducts")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SkiProject.Infrastructure.Data.Models.Shop.Gender", "Gender")
                        .WithMany("Products")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Shop.ProductImage", b =>
                {
                    b.HasOne("SkiProject.Infrastructure.Data.Models.Shop.Product", null)
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Slope", b =>
                {
                    b.HasOne("SkiProject.Infrastructure.Data.Models.City", "City")
                        .WithOne("Slope")
                        .HasForeignKey("SkiProject.Infrastructure.Data.Models.Slope", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Account.ApplicationUser", b =>
                {
                    b.Navigation("CreatedAdvertisments");

                    b.Navigation("CreatedProducts");

                    b.Navigation("CreatedTopics");

                    b.Navigation("Messages");

                    b.Navigation("Posts");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.City", b =>
                {
                    b.Navigation("PlacesToStay");

                    b.Navigation("Slope");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.ForumTopic", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.PlaceToStay", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Shop.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Shop.Gender", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SkiProject.Infrastructure.Data.Models.Shop.Product", b =>
                {
                    b.Navigation("ProductImages");
                });
#pragma warning restore 612, 618
        }
    }
}
